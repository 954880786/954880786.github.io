<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title></title>
      <url>%2F2017%2F10%2F15%2Fc%2B%2B%2F</url>
      <content type="text"><![CDATA[cout &lt;&lt; 输出， 可插入变量，将被自动转换为字符串输出 控制符（换行符）endl, cin &gt;&gt; 输入，可以将输入自动转换为待输入变量的类型 自带宏定义: INT_MAX , LONG_MAX 等等 sizeof(int 或者变量名) wchat_t 宽字符类型, wcin wcout 宽字符类型的输入输出, 前缀L来标识宽字符常量和宽字符字符串 任何非零值将被隐式转换为true，其他的将被转换为false 书写浮点数 2.62e+8 auto 让编译器能够根据初始值的类型判断变量的类型 char bird[11] = “Mr. Shao” cin.getline(name, 20) 读取直到换行符，并丢弃换行符 cin.get(name, 20) 读取直到换行符，但会将换行符保留在输入队列中，因此get函数不能跨过换行符。但不带任何参数的get可以读取下一个任意的字符 string 更为方便和安全，可以将一个string对象赋值给另一个string对象，可是使用 “ + ”合并string str.size() 获取字符串长度 strlen() 返回字符串的长度，但不包括最后的空字符 string 类可以互相比较，如( != ） 共用体 union 同时存储一个变量 使用new来分配内存：int * pr = new int; 使用delete释放内存：delete pr 使用new来创建动态数组：int * pr = new int [10] （数组大小可以为变量），delete [] pr x = y = z = 0 ☑️ 基于范围的for循环, int prices[100] = { … } ; for (int x: prices) ofstream outFile; outFile.open(“fish.txt”); outFile &lt;&lt; “hello”; ifstream inFile; inFile.open(“bowing.txt”); inFile &gt;&gt; var; 函数指针的声明 double pam(int) —— &gt; double (pf) (int) , 调用方法 (pf)(3) or pf(3) 创建引用变量 int &amp; second = first, 引用一旦确定不再能更改 不要返回指向局部变量或零时对象的引用。函数执行完毕后，局部变量和零时对象将消失，引用将指向不存在的数据。 若函数的目的是使用传递的值而不是要修改他们，则将引用指定为const会更好，可以避免无意中修改数据的编程错误 内联函数：在函数的声明和定义前加上关键词 inline，不适用于函数体过大或者递归的情形。当使用宏执行了类似函数的功能时，应尽量使用内联函数实现。 默认参数：int harpo(int n, int m = 4) 函数重载： 使用函数重载时，若参数类型不符需要强制转换时，会出错。 编译器将把类型引用和类型本身是为同一个特征标，有无const将视作为两个特征标 返回类型可以不同，但特征标也必须不同 函数模版 template void Swap(AnyType &amp; a, AnyType &amp; b) 函数模版匹配的优先级： 完全匹配，但常规函数优先于模版（完全匹配时允许一些无关紧要的转换） 提升转换 (char —&gt;int) 标准转换（int —&gt; char) 用户定义的转换，如类声明定义中的转换 模板具体化：template &lt;&gt; void recycle (blot &amp; t) decltype(x) y; 将y转换为与x相同的类型。在使用模版时，若不能确定某两种类型进行运算后是何种类型，decltype(x+y) xpy = x + y; 头文件中经常包含的内容：函数原型、使用宏定义的符号变量、结构声明、类声明、模版声明、内联函数 include时，若文件名被尖角号包裹，则直接在标准位置寻找。若文件名被双引号包裹，则先在工作目录查找，再去标准位置寻找。 volatile：即使程序代码没有对内存进行更改，其值也可能变化 static 修饰变量：限定该变量仅在此文件中链接 extern 修饰变量进行声明：表示该变量或者函数的定义在别的文件中,提示编译器遇到此变量和函数时在其他模块寻找，不报错；在a.h中包含 “extern int a;” test1.cpp中包含 “int a =3”；test2中包含“a.h”后便可直接调用变量a。 声明std::cout,表明接下来的cout都是在std名称空间中的 类的构造函数：专门用于构造新对象、将值赋给他们的数据成员。其中构造函数的名称与类名相同，且没有返回值。 初始化新对象的方法： Bozo bozetta = Bozo(“Bozeta”，“Biggens”) Bozo fufu(“Fufu”, “Owdeb”) Bozo *pc = new Bozo(“Polo”, “le deu”) 为避免类中函数的参数名与方法名混乱，一种常见的做法是在数据成员名前使用m前缀，另一种方法是用在成员名使用后缀 类的析构函数：对象过期时，程序将自动调用析构函数，以完成清理工作。如果构造函数使用new分配内存，析构函数就需要使用delete释放内存。析构函数的名称是在类名前加上~ this指针：指向调用成员函数的对象（this —&gt; tot_val，可以通过指针来访问类成员） const 成员函数 void show() const; const成员函数可以被调用const类对象调用(const Stock land = Stock()) 在类中定义的名称的作用域都为整个类，作用域为整个类的名称只在该类中是已知的。 在类中定义符号常量使用static而不能使用const]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Api]]></title>
      <url>%2F2017%2F04%2F13%2FApi%2F</url>
      <content type="text"><![CDATA[Project-hot2热气球 naive-scrapy-master使用方法：在文件夹下运行scrapy crawl allDataProcess 文件夹的文件完成对数据的预处理 clac_news_hot.py 计算新闻热度 clac_word_freq.py 计算词语热度 classify_news.py 分类新闻 clean_str.py 字符串清理包，被其他程序引用 hot_muti_count.py 将新闻的热度与count计算，count越高热度越高，count为0的新闻热度也为0，将不再被显示 rm_samenews.py 将重复的新闻count置0，将其count转移至其中的一条新闻上 basic 基类，被其他类所继承 PrepareJson 提供基本的json文件 gen_basic_json.py 提供基本的json relatedGraph.py 关系图的数据json read_graph/topics/words.py 用于美观展示生成的json文件 contrast_web.py 对比网页，返回改动内容processdata.py 集成DataProcess 的文件，运行后可以一次生成所有基本数据settings.py 存放配置及常数utils.py 存放常用函数stopwords.dat 停用词表]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hello]]></title>
      <url>%2F2017%2F04%2F13%2Fhello%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2017%2F04%2F13%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
